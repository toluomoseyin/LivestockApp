// <auto-generated />
using System;
using AnimalFarmsMarket.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DevelopmentMigrations.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210713031034_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11");

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(125);

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(125);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(125);

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.Agent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountName")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bank")
                        .HasColumnType("TEXT");

                    b.Property<string>("BusinessLocation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("NIN")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NINTrackingId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<byte>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Photo")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("ZipCode")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.BroadcastNews", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Article")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("Dislikes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Likes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(125);

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BroadCastNews");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(125);

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("BroadCastNewsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(125);

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BroadCastNewsId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.DeliveryAssignment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeliveryPersonId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryPersonId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("DeliveryAssignments");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.DeliveryMode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("DeliveryModes");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.DeliveryPerson", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Coverage")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(125);

                    b.Property<string>("CoverageLocation")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(125);

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("NIN")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NINTrackingId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("DeliveryPersons");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.Livestock", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER")
                        .HasMaxLength(10);

                    b.Property<string>("AgentId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Availability")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(25);

                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(25);

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("MarketId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasMaxLength(10);

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<byte>("Sex")
                        .HasColumnType("INTEGER")
                        .HasMaxLength(25);

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MarketId");

                    b.ToTable("LiveStocks");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.LivestockImages", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LivestockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LivestockId");

                    b.ToTable("LivestockImages");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.Market", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("MarketName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(125);

                    b.HasKey("Id");

                    b.ToTable("Markets");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.MarketAddress", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(125);

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("MarketId")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(125);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(125);

                    b.HasKey("Id");

                    b.HasIndex("MarketId")
                        .IsUnique();

                    b.ToTable("MarketAddresses");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeliveryDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("DeliveryModeId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<string>("PaymentMethodId")
                        .HasColumnType("TEXT");

                    b.Property<byte>("PaymentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShippedTo")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(125);

                    b.Property<string>("ShippingPlanId")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnName("CustomerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryModeId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ShippingPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.OrderItems", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LivestockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LivestockId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.Partner", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Logo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.PaymentMethod", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.Rating", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LivestockId")
                        .HasColumnType("TEXT");

                    b.Property<int>("RatingFigure")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LivestockId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LivestockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LivestockId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.ShippingPlan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Coverage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DeliveryCost")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<int>("DeliveryPeriod")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ShippingPlans");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.Testimony", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Testimonies")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(250);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(125);

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Testimonies");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.TrackingHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeliveryPersonId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryPersonId");

                    b.HasIndex("OrderId");

                    b.ToTable("TrackingHistories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.Address", b =>
                {
                    b.HasOne("AnimalFarmsMarket.Data.Models.AppUser", "User")
                        .WithOne("Address")
                        .HasForeignKey("AnimalFarmsMarket.Data.Models.Address", "UserId");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.Agent", b =>
                {
                    b.HasOne("AnimalFarmsMarket.Data.Models.AppUser", "AppUser")
                        .WithOne("Agent")
                        .HasForeignKey("AnimalFarmsMarket.Data.Models.Agent", "AppUserId");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.BroadcastNews", b =>
                {
                    b.HasOne("AnimalFarmsMarket.Data.Models.AppUser", "User")
                        .WithMany("Broadcasts")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.Comment", b =>
                {
                    b.HasOne("AnimalFarmsMarket.Data.Models.BroadcastNews", "BroadcastNews")
                        .WithMany("Comments")
                        .HasForeignKey("BroadCastNewsId");

                    b.HasOne("AnimalFarmsMarket.Data.Models.AppUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.DeliveryAssignment", b =>
                {
                    b.HasOne("AnimalFarmsMarket.Data.Models.DeliveryPerson", "DeliveryPerson")
                        .WithMany("DeliveryAssignments")
                        .HasForeignKey("DeliveryPersonId");

                    b.HasOne("AnimalFarmsMarket.Data.Models.Order", "Order")
                        .WithOne("DeliveryAssignment")
                        .HasForeignKey("AnimalFarmsMarket.Data.Models.DeliveryAssignment", "OrderId");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.DeliveryPerson", b =>
                {
                    b.HasOne("AnimalFarmsMarket.Data.Models.AppUser", "AppUser")
                        .WithOne("DeliveryPerson")
                        .HasForeignKey("AnimalFarmsMarket.Data.Models.DeliveryPerson", "AppUserId");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.Livestock", b =>
                {
                    b.HasOne("AnimalFarmsMarket.Data.Models.Agent", "Agent")
                        .WithMany("Livestocks")
                        .HasForeignKey("AgentId");

                    b.HasOne("AnimalFarmsMarket.Data.Models.Category", "Category")
                        .WithMany("Livestocks")
                        .HasForeignKey("CategoryId");

                    b.HasOne("AnimalFarmsMarket.Data.Models.Market", "Market")
                        .WithMany("Livestocks")
                        .HasForeignKey("MarketId");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.LivestockImages", b =>
                {
                    b.HasOne("AnimalFarmsMarket.Data.Models.Livestock", "Livestock")
                        .WithMany("Images")
                        .HasForeignKey("LivestockId");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.MarketAddress", b =>
                {
                    b.HasOne("AnimalFarmsMarket.Data.Models.Market", "Market")
                        .WithOne("MarketAddress")
                        .HasForeignKey("AnimalFarmsMarket.Data.Models.MarketAddress", "MarketId");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.Order", b =>
                {
                    b.HasOne("AnimalFarmsMarket.Data.Models.DeliveryMode", "DeliveryMode")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryModeId");

                    b.HasOne("AnimalFarmsMarket.Data.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("AnimalFarmsMarket.Data.Models.ShippingPlan", "ShippingPlan")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingPlanId");

                    b.HasOne("AnimalFarmsMarket.Data.Models.AppUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.OrderItems", b =>
                {
                    b.HasOne("AnimalFarmsMarket.Data.Models.Livestock", "Livestock")
                        .WithMany("OrderDetails")
                        .HasForeignKey("LivestockId");

                    b.HasOne("AnimalFarmsMarket.Data.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.Rating", b =>
                {
                    b.HasOne("AnimalFarmsMarket.Data.Models.Livestock", "Livestock")
                        .WithMany("Ratings")
                        .HasForeignKey("LivestockId");

                    b.HasOne("AnimalFarmsMarket.Data.Models.AppUser", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.Review", b =>
                {
                    b.HasOne("AnimalFarmsMarket.Data.Models.Livestock", "Livestock")
                        .WithMany("Reviews")
                        .HasForeignKey("LivestockId");

                    b.HasOne("AnimalFarmsMarket.Data.Models.AppUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.Testimony", b =>
                {
                    b.HasOne("AnimalFarmsMarket.Data.Models.AppUser", "User")
                        .WithMany("Testimonies")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AnimalFarmsMarket.Data.Models.TrackingHistory", b =>
                {
                    b.HasOne("AnimalFarmsMarket.Data.Models.DeliveryPerson", "DeliveryPerson")
                        .WithMany("TrackingHistory")
                        .HasForeignKey("DeliveryPersonId");

                    b.HasOne("AnimalFarmsMarket.Data.Models.Order", "Order")
                        .WithMany("TrackingHistories")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AnimalFarmsMarket.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AnimalFarmsMarket.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimalFarmsMarket.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AnimalFarmsMarket.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
